/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package club.j3studios.a_login;

import club.j3studios.system.database.SQL;
import club.j3studios.system.model.Cliente;
import club.j3studios.system.utils.Tools;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.nio.charset.Charset;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;

/**
 *
 * @author josne
 */
public class AgregarLicenciasCommand extends javax.swing.JFrame {

    /**
     * Creates new form AgregarLicenciasCommand
     */
    public AgregarLicenciasCommand() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    /*public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            loadMonthlyKeys();
            loadYearlyKeys();
            
            if (!monthlyKeys.isEmpty()) {
                for (String key : monthlyKeys) {
                    regMonthlyKey(key);
                }
            }     
            
            if (!yearlyKeys.isEmpty()) {
                for (String key : yearlyKeys) {
                    regYearlyKey(key);
                }
            } 
            
            new Tools().debug("Registrados " + monthlyKeys.size() + " códigos de licencias mensuales.");
            new Tools().debug("Registrados " + yearlyKeys.size() + " códigos de licencias anuales.");
        });
    }*/

    public static boolean regMonthlyKey (String key) {
        boolean respuesta = false;
        Connection cn = SQL.conectar2();
        try {
            PreparedStatement consulta = cn.prepareStatement("insert into keys_monthly values(?, ?)");
            consulta.setInt(1, 0);            
            consulta.setString(2, key);            
            if (consulta.executeUpdate() > 0) {
                respuesta = true;
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al guardar la licencia en la base de datos");
        }
        return respuesta;
    }
    
    public static boolean regYearlyKey (String key) {
        boolean respuesta = false;
        Connection cn = SQL.conectar2();
        try {
            PreparedStatement consulta = cn.prepareStatement("insert into keys_yearly values(?, ?)");
            consulta.setInt(1, 0);            
            consulta.setString(2, key);            
            if (consulta.executeUpdate() > 0) {
                respuesta = true;
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al guardar la licencia en la base de datos");
        }
        return respuesta;
    }
    
    public static ArrayList<String> monthlyKeys = new ArrayList<>();
    public static ArrayList<String> yearlyKeys = new ArrayList<>();
    
    public static void loadMonthlyKeys () {
        try {
            URLConnection url = new URL("https://pastebin.com/raw/B557zPuu").openConnection();
            url.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11");
            url.connect();
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.getInputStream(), Charset.forName("UTF-8")));
            String str1;         
            while ((str1 = reader.readLine()) != null) {
                monthlyKeys.add(str1);
            }
        }
        catch (IOException localIOException) {}	
    }
    public static void loadYearlyKeys () {
        try {
            URLConnection url = new URL("https://pastebin.com/raw/K6p8t5Yv").openConnection();
            url.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11");
            url.connect();
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.getInputStream(), Charset.forName("UTF-8")));
            String str1;         
            while ((str1 = reader.readLine()) != null) {
                yearlyKeys.add(str1);
            }
        }
        catch (IOException localIOException) {}
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
