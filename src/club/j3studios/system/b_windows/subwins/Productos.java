package club.j3studios.system.b_windows.subwins;

import club.j3studios.system.b_windows.MainMenu;
import club.j3studios.system.b_windows.dialogs.DeleteItemVentaDialog;
import club.j3studios.system.b_windows.dialogs.editProduct;
import club.j3studios.system.b_windows.dialogs.newProduct;
import club.j3studios.system.control.Ctrl_Producto;
import club.j3studios.system.database.SQL;
import club.j3studios.system.model.Producto;
import club.j3studios.system.utils.SearchOption;
import club.j3studios.system.utils.jtable.ButtonRenderer;
import club.j3studios.system.utils.jtable.GestionEncabezadoTabla;
import club.j3studios.system.utils.jtable.TableActionCellEditor;
import club.j3studios.system.utils.jtable.TableActionCellRenderer;
import club.j3studios.system.utils.jtable.TableActionEvent;
import java.awt.Component;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author josne
 */
public class Productos extends javax.swing.JPanel {

    private MainMenu principal;
    
    public String codigo = "";
    public String desc = "";
    public String categoria = "";
    public Integer marca = 0;
    public Double costo = 0.0;
    public Double ganancia = 0.0;
    public Double venta = 0.0;
    public Boolean controlStock = false;
    public Integer stock = 0;
    public Integer minStock = 0;
    public Integer maxStock = 0;
    public String unidadMedida = "";
    public Boolean Exento = true;
    
    public Integer categoriaID = 0;
    
    public Productos(MainMenu principal) {
        this.principal = principal;        
        initComponents();
        
        Timer timer = new Timer();
        // Schedule a task to be executed every second
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
            	String fechaActual = "";
                Date date = new Date();
                fechaActual = new SimpleDateFormat("dd/MM/yyyy - HH:mm:ss").format(date);            	
                labelFecha.setText(fechaActual);
            }
        }, 0, 1000);
        labelVersion.setText("Version " + MainMenu.VERSION_PROGRAM);
        
        txtBuscador.addEventOptionSelected((SearchOption option, int index) -> {
            txtBuscador.setHint("Buscar por el " + option.getName() + "...");
        });
        txtBuscador.addOption(new SearchOption("Código", new ImageIcon(getClass().getResource("/images/etiqueta.png"))));
	txtBuscador.addOption(new SearchOption("Descripción", new ImageIcon(getClass().getResource("/images/escaner.png")))); 
	txtBuscador.setSelectedIndex(0);
        
        inicializarTablaProducto();        
        labelUsuario.setText(principal.usuario.getNombre());
        labelRango.setText("Administrador");
        
        loadData("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        labelVersion = new javax.swing.JLabel();
        labelFecha = new javax.swing.JLabel();
        labelUsuario = new javax.swing.JLabel();
        labelU = new javax.swing.JLabel();
        labelRango = new javax.swing.JLabel();
        labelR = new javax.swing.JLabel();
        txtBuscador = new club.j3studios.system.utils.TextFieldSearchOption();
        button1 = new club.j3studios.system.utils.Button();
        background = new javax.swing.JLabel();

        setOpaque(false);

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel1KeyPressed(evt);
            }
        });
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollPane.setViewportView(table);

        jPanel1.add(scrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 1360, 580));

        jPanel3.setBackground(new java.awt.Color(255, 255, 220));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelVersion.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelVersion.setForeground(new java.awt.Color(102, 102, 102));
        labelVersion.setText("Version 1.13.08.23");
        jPanel3.add(labelVersion, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 362, 20));

        labelFecha.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        labelFecha.setForeground(new java.awt.Color(102, 102, 102));
        labelFecha.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelFecha.setText("13/08/2023 - 4:47:34");
        jPanel3.add(labelFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 0, 362, 20));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 740, 1360, 30));

        labelUsuario.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelUsuario.setForeground(new java.awt.Color(255, 255, 255));
        labelUsuario.setText("---");
        jPanel1.add(labelUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 40, 210, 20));

        labelU.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelU.setForeground(new java.awt.Color(255, 255, 255));
        labelU.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelU.setText("VENDEDOR: ");
        jPanel1.add(labelU, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, 90, 20));

        labelRango.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelRango.setForeground(new java.awt.Color(255, 255, 255));
        labelRango.setText("---");
        jPanel1.add(labelRango, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 60, 210, 20));

        labelR.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelR.setForeground(new java.awt.Color(255, 255, 255));
        labelR.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelR.setText("RANGO: ");
        jPanel1.add(labelR, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 90, 20));

        txtBuscador.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscadorKeyReleased(evt);
            }
        });
        jPanel1.add(txtBuscador, new org.netbeans.lib.awtextra.AbsoluteConstraints(934, 100, 420, 50));

        button1.setBackground(new java.awt.Color(102, 204, 255));
        button1.setForeground(new java.awt.Color(255, 255, 255));
        button1.setText("NUEVO PRODUCTO");
        button1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        button1.setRippleColor(new java.awt.Color(0, 102, 255));
        button1.setShadowColor(new java.awt.Color(0, 102, 255));
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });
        jPanel1.add(button1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, 220, 50));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Background1.png"))); // NOI18N
        background.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                backgroundKeyPressed(evt);
            }
        });
        jPanel1.add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, -1, 760));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backgroundKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_backgroundKeyPressed
       
    }//GEN-LAST:event_backgroundKeyPressed

    private void jPanel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyPressed
        
    }//GEN-LAST:event_jPanel1KeyPressed

    private void txtBuscadorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscadorKeyReleased
        if (txtBuscador.isSelected()) {
            int option = txtBuscador.getSelectedIndex();
            String text = "%"+txtBuscador.getText().trim()+"%";
            if (option==0) {
            	loadData("where " + SQL.PRODUCTOS_CODIGO + " like ? ", text);
            } else {
            	loadData("where " + SQL.PRODUCTOS_DESC + " like ? ", text);
            }
        }
    }//GEN-LAST:event_txtBuscadorKeyReleased

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        newProduct dialog = new newProduct(principal, this);
        dialog.showMessage();
        if (dialog.getMessageType() == newProduct.MessageType.OK) {
            saveProduct(dialog);
        }
    }//GEN-LAST:event_button1ActionPerformed
    
    private void saveProduct (newProduct dialog) {
        
        Producto p = new Producto();
        Ctrl_Producto ctrlProduct = new Ctrl_Producto();
        
        if (!dialog.txtCode.getText().isEmpty() && !dialog.txtDesc.getText().isEmpty() && 
                !dialog.txtCompra.getText().isEmpty() && !dialog.txtGanancia.getText().isEmpty() &&
                !dialog.txtStockActual.getText().isEmpty() && !dialog.txtStockMax.getText().isEmpty() &&
                !dialog.txtStockMin.getText().isEmpty() && !dialog.txtVenta.getText().isEmpty()) {
            
            if (!ctrlProduct.existProductoByCode(codigo)) {
                String costo = dialog.txtCompra.getText().trim().replace(",", ".");
                String ganancia = dialog.txtGanancia.getText().trim().replace(",", ".");
                String venta = dialog.txtVenta.getText().trim().replace(",", ".");
                
                p.setCodigo(dialog.txtCode.getText().trim());
                p.setDescripcion(dialog.txtDesc.getText().trim());
                idCategoria(dialog);
                p.setIdCategoria(categoriaID);
                p.setIdMarca(0);
                p.setPrecioCosto(Double.valueOf(costo));
                p.setGanancia(Double.valueOf(ganancia));
                p.setPrecioVenta(Double.valueOf(venta));
                p.setControlStock(dialog.checkControl.isSelected());
                p.setStock(Integer.valueOf(dialog.txtStockActual.getText().trim()));
                p.setMinStock(Integer.valueOf(dialog.txtStockMin.getText().trim()));
                p.setMaxStock(Integer.valueOf(dialog.txtStockMax.getText().trim()));
                p.setUnidadMedida(dialog.boxMedida.getSelectedItem().toString().toUpperCase());
                p.setExento(dialog.checkExento.isSelected());                
                if (ctrlProduct.saveProducto(p)) {
                    JOptionPane.showMessageDialog(null, "Producto registrado con éxito!");
                    clearInfo();
                } else {
                    JOptionPane.showMessageDialog(null, "Se ha presentado un error al guardar el producto!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ya existe un producto registrado con ese código!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Completa todos los campos");
        }
        loadData("");
    }
    
    private void inicializarTablaProducto() {
        table = new JTable();
        table.setDefaultRenderer(Object.class, new ButtonRenderer());
        
        modeloDatosProductos = new DefaultTableModel() {
            private static final long serialVersionUID = 1L;
            
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, true
            };
            
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
                
        modeloDatosProductos.addColumn("Código");
        modeloDatosProductos.addColumn("Descripción");
        modeloDatosProductos.addColumn("Categoría");
        modeloDatosProductos.addColumn("Marca");
        modeloDatosProductos.addColumn("Precio de Costo");
        modeloDatosProductos.addColumn("Ganancia (%)");
        modeloDatosProductos.addColumn("Precio de Venta");
        modeloDatosProductos.addColumn("Control de Stock");
        modeloDatosProductos.addColumn("Stock Actual");
        modeloDatosProductos.addColumn("Stock Mínimo");
        modeloDatosProductos.addColumn("Stock Máximo");
        modeloDatosProductos.addColumn("Unidad de Medida");
        modeloDatosProductos.addColumn("Exento");        
        modeloDatosProductos.addColumn(" ");
		
        table.setRowHeight(40);
        
        JTableHeader jtableHeader = table.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezadoTabla());
        table.setTableHeader(jtableHeader);
	    
        table.setModel(modeloDatosProductos);
        TableActionEvent event = new TableActionEvent() {
            @Override
            public void onEdit(int row) {                
                String codigo = table.getValueAt(row, 0).toString();
                clickEditor(codigo);
            }
            @Override
            public void onDelete(int row) {
                String codigo = table.getValueAt(row, 0).toString();
                clickDelete(codigo);
            }
        };
        table.getColumnModel().getColumn(13).setCellRenderer(new TableActionCellRenderer());
        table.getColumnModel().getColumn(13).setCellEditor(new TableActionCellEditor(event));        
        for (int i = 0; i<table.getColumnCount()-1; i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(new DefaultTableCellRenderer() {
            private static final long serialVersionUID = 1L;
                @Override
                public Component getTableCellRendererComponent(JTable jtable, Object o, boolean bln, boolean bln1, int i, int i1) {
                    setHorizontalAlignment(SwingConstants.CENTER);
                    return super.getTableCellRendererComponent(jtable, o, bln, bln1, i, i1);
                }
            });
        }
        
        scrollPane.setViewportView(table);
    }
       
    private void clickEditor(String code) {
        Producto p = new Producto();
        Ctrl_Producto cp = new Ctrl_Producto();
        
        try {
            Connection con = SQL.conectar();
            String sql = "select * from " + SQL.PRODUCTOS_TABLE + " where " + SQL.PRODUCTOS_CODIGO + " = '" + code + "'";
            
            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();            
            while (rs.next()) {
                codigo = rs.getString(SQL.PRODUCTOS_CODIGO);
                desc = rs.getString(SQL.PRODUCTOS_DESC);
                categoria = rs.getString(SQL.PRODUCTOS_IDCATEGORIA);
                marca = rs.getInt(SQL.PRODUCTOS_IDMARCA);
                costo = rs.getDouble(SQL.PRODUCTOS_COSTE);
                ganancia = rs.getDouble(SQL.PRODUCTOS_GANANCIA);                
                venta = rs.getDouble(SQL.PRODUCTOS_VENTA);
                controlStock = rs.getBoolean(SQL.PRODUCTOS_STOCK_CONTROL);
                stock = rs.getInt(SQL.PRODUCTOS_STOCK_ACTUAL);
                minStock = rs.getInt(SQL.PRODUCTOS_STOCK_MIN);
                maxStock = rs.getInt(SQL.PRODUCTOS_STOCK_MAX);
                unidadMedida = rs.getString(SQL.PRODUCTOS_UNIDADMEDIDA);
                Exento = rs.getBoolean(SQL.PRODUCTOS_EXENTO);
            }
            con.close();
        } catch (SQLException e) {
            System.out.print("Error al llenar la tabla de productos.");
            System.out.print(e);
        }
        
        Integer idProduct = cp.getIdProductoByCode(codigo);
        
        p.setIdProducto(idProduct);
        p.setCodigo(codigo);
        p.setDescripcion(desc);
        p.setIdCategoria(Integer.valueOf(categoria));
        p.setIdMarca(0);
        p.setPrecioCosto(costo);
        p.setGanancia(ganancia);
        p.setPrecioVenta(venta);
        p.setControlStock(controlStock);
        p.setStock(stock);
        p.setMinStock(minStock);
        p.setMaxStock(maxStock);
        p.setUnidadMedida(unidadMedida);
        p.setExento(Exento);
        
        String categ = relacionarCategoria(Integer.valueOf(categoria));        
        editProduct dialog = new editProduct(principal, this);
        dialog.showMessage(codigo, desc, categ, marca, costo, ganancia, venta, controlStock, stock, minStock, maxStock, unidadMedida, Exento);
        if (dialog.getMessageType() == editProduct.MessageType.OK) {
            String costo1 = dialog.txtCompra.getText().trim().replace(",", ".");
            String ganancia1 = dialog.txtGanancia.getText().trim().replace(",", ".");
            String venta1 = dialog.txtVenta.getText().trim().replace(",", ".");
                
            p.setCodigo(dialog.txtCode.getText().trim());
            p.setDescripcion(dialog.txtDesc.getText().trim());
            idCategoria(dialog);
            p.setIdCategoria(categoriaID);
            p.setIdMarca(0);
            p.setPrecioCosto(Double.valueOf(costo1));
            p.setGanancia(Double.valueOf(ganancia1));
            p.setPrecioVenta(Double.valueOf(venta1));
            p.setControlStock(dialog.checkControl.isSelected());
            p.setStock(Integer.valueOf(dialog.txtStockActual.getText().trim()));
            p.setMinStock(Integer.valueOf(dialog.txtStockMin.getText().trim()));
            p.setMaxStock(Integer.valueOf(dialog.txtStockMax.getText().trim()));
            p.setUnidadMedida(dialog.boxMedida.getSelectedItem().toString().toUpperCase());
            p.setExento(dialog.checkExento.isSelected());            
            if (cp.updateProducto(p, idProduct)) {
               JOptionPane.showMessageDialog(null, "¡Producto Actualizado!");
               clearInfo(); 
            }
        }
        loadData("");
    }
    
    private void clickDelete (String code) {
        Integer productID = -1;
        try {
            Connection con = SQL.conectar();
            String sql = "select * from " + SQL.PRODUCTOS_TABLE + " where " + SQL.PRODUCTOS_CODIGO + " = '" + code + "'";
            
            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();            
            while (rs.next()) {
                productID = rs.getInt(SQL.PRODUCTOS_IDPRODUCT);
            }
            con.close();
        } catch (SQLException e) {
            System.out.print("Error al llenar la tabla de productos.");
            System.out.print(e);
        }
        
        Ctrl_Producto ctrlProduct = new Ctrl_Producto();        
        
        DeleteItemVentaDialog dialog = new DeleteItemVentaDialog(principal);
        dialog.showMessage("¿Eliminar Producto?", "¿Seguro deseas eliminar este producto?");
        if (dialog.getMessageType() == DeleteItemVentaDialog.MessageType.OK) {
            if (!ctrlProduct.deleteProducto(productID)) {
                JOptionPane.showMessageDialog(null, "¡Producto Eliminado!");
                clearInfo();
            } else {
                JOptionPane.showMessageDialog(null, "¡Error al eliminar el producto!");
                clearInfo();
            }
        }
        
        loadData("");
    }
    
    private void clearInfo() {
        codigo = "";
        desc = "";
        categoria = "";
        marca = 0;
        costo = 0.0;
        ganancia = 0.0;
        venta = 0.0;
        controlStock = false;
        stock = 0;
        minStock = 0;
        maxStock = 0;
        unidadMedida = "";
        Exento = true;
    }
    
    private void loadData (String where, Object... search) {
        try {
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.setRowCount(0);
			
            Connection con = SQL.conectar();
            String sql = "select * from " + SQL.PRODUCTOS_TABLE + " " + where;
            
            PreparedStatement ps = con.prepareStatement(sql);
            for (int i = 0; i < search.length; i++) {
                ps.setObject(i+1, search[i]);
            }
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String codigo = rs.getString(SQL.PRODUCTOS_CODIGO);
                String nombre = rs.getString(SQL.PRODUCTOS_DESC);
                Integer categoria = rs.getInt(SQL.PRODUCTOS_IDCATEGORIA);
                Integer marca = rs.getInt(SQL.PRODUCTOS_IDMARCA);
                Double precioCosto = rs.getDouble(SQL.PRODUCTOS_COSTE);
                Double Ganancias = rs.getDouble(SQL.PRODUCTOS_GANANCIA);
                Double precioVenta = rs.getDouble(SQL.PRODUCTOS_VENTA);
                Boolean stockControl = rs.getBoolean(SQL.PRODUCTOS_STOCK_CONTROL);
                Integer stock = rs.getInt(SQL.PRODUCTOS_STOCK_ACTUAL);
                Integer stockMin = rs.getInt(SQL.PRODUCTOS_STOCK_MIN);
                Integer stockMax = rs.getInt(SQL.PRODUCTOS_STOCK_MAX);
                String tipoVenta = rs.getString(SQL.PRODUCTOS_UNIDADMEDIDA);
                Boolean exento = rs.getBoolean(SQL.PRODUCTOS_EXENTO);
		             
                DecimalFormat formato = new DecimalFormat("###,###,##0.00");
                String precioCostoForm = formato.format(precioCosto);
                String precioVentaForm = formato.format(precioVenta);
                String ivaForm = (exento ? "Sí" : "No");
                
                model.addRow(new Object[] {
                    codigo, 
                    nombre, 
                    getCategoria(categoria),
                    "Ninguna",
                    precioCostoForm,
                    Ganancias,
                    precioVentaForm,
                    (stockControl ? "Sí" : "No"),
                    stock, 
                    stockMin, 
                    stockMax, 
                    tipoVenta,
                    ivaForm});
			                
                table.getColumnModel().getColumn(0).setPreferredWidth(40);
                table.getColumnModel().getColumn(1).setPreferredWidth(240);
                table.getColumnModel().getColumn(2).setPreferredWidth(100);
                table.getColumnModel().getColumn(3).setPreferredWidth(100);
                table.getColumnModel().getColumn(4).setPreferredWidth(80);
                table.getColumnModel().getColumn(5).setPreferredWidth(100);
                table.getColumnModel().getColumn(6).setPreferredWidth(70);
                table.getColumnModel().getColumn(7).setPreferredWidth(70);
                table.getColumnModel().getColumn(8).setPreferredWidth(70);
                table.getColumnModel().getColumn(9).setPreferredWidth(70);
                table.getColumnModel().getColumn(10).setPreferredWidth(70);
                table.getColumnModel().getColumn(11).setPreferredWidth(70);
                table.getColumnModel().getColumn(12).setPreferredWidth(70);                
            }
	        
            con.close();
        } catch (SQLException e) {
            System.out.print("Error al llenar la tabla de productos.");
            System.out.print(e);
        }
    }
    
    public String getCategoria(int idCategoria) {
        String sql = "select " + SQL.CATEGORIA_DESC + " from " + SQL.CATEGORIA_TABLE + " where " + SQL.CATEGORIA_ID +" = '" + idCategoria + "'";
        Statement st;
        try {
            Connection cn = SQL.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                return rs.getString(SQL.CATEGORIA_DESC);
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al obtener el id de la categoria!");
        }
        return "";
    }
        
    private DefaultTableModel modeloDatosProductos;

    public String relacionarCategoria(int idCategoria) {
        String sql = "select descripcion from tb_categorias where idCategoria = '" + idCategoria + "'";
        Statement st;
        try {
            Connection cn = SQL.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                categoria = rs.getString("descripcion");
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("¡Error al obtener el id de la categoria!");
        }
        return categoria;
    }
	
    public int idCategoria(newProduct dialog) {
        String sql = "select * from tb_categorias where descripcion = '" + dialog.boxCategoria.getSelectedItem() + "'";
        Statement st;
        try {
            Connection cn = SQL.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                categoriaID = rs.getInt("idCategoria");
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener id categoria");
        }
        return categoriaID;
    }
    
    public int idCategoria(editProduct dialog) {
        String sql = "select * from tb_categorias where descripcion = '" + dialog.boxCategoria.getSelectedItem() + "'";
        Statement st;
        try {
            Connection cn = SQL.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                categoriaID = rs.getInt("idCategoria");
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener id categoria");
        }
        return categoriaID;
    }
    
    /*
    private void updateClientData(editClientDialog dialog) {
        Cliente cliente = new Cliente();
        Ctrl_Cliente controlCliente = new Ctrl_Cliente();
        
        if (!dialog.txtCedula.getText().isEmpty() && !dialog.txtNombre.getText().isEmpty() && !dialog.txtTlf.getText().isEmpty()) {
            
            cliente.setCedula(dialog.txtCedula.getText().trim());
            cliente.setNombre(dialog.txtNombre.getText().trim());
            cliente.setGenero(dialog.boxGenero.getSelectedItem().toString());
            cliente.setTelefono(dialog.txtTlf.getText().trim());
            cliente.setDireccion(dialog.txtDirection.getText().trim());
            cliente.setCorreo(dialog.txtCorreo.getText().trim());
            cliente.setCompras(this.compras);
            cliente.setValorTotal(this.totalConsume);
            cliente.setFechaRegistro(this.regDate);
            cliente.setUltimaCompra(this.lastCompra);
            
            if (controlCliente.actualizar(cliente, this.clientID)) {
                JOptionPane.showMessageDialog(null, "¡Datos del cliente actualizados!");
                clearInfo();
            } else {
                JOptionPane.showMessageDialog(null, "¡Error al actualizar los datos del cliente!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Completa todos los campos");
        }
        loadData("");
    }
    
    private void saveClient(newClientDialog dialog) {
        Cliente cliente = new Cliente();
        Ctrl_Cliente controlCliente = new Ctrl_Cliente();
        
        Date date = new Date();
        String fechaActual = new SimpleDateFormat("dd/MM/yyyy - HH:mm:ss").format(date);
                
        if (!dialog.txtCedula.getText().isEmpty() && !dialog.txtNombre.getText().isEmpty() && 
                !dialog.txtTlf.getText().isEmpty()) {
            
            if (!controlCliente.existeCliente(dialog.txtCedula.getText().trim())) {
                cliente.setCedula(dialog.txtCedula.getText().trim());
                cliente.setNombre(dialog.txtNombre.getText().trim());
                cliente.setGenero(dialog.boxGenero.getSelectedItem().toString());
                cliente.setTelefono(dialog.txtTlf.getText().trim());
                cliente.setDireccion(dialog.txtDirection.getText().trim());
                cliente.setCorreo(dialog.txtCorreo.getText().trim());
                cliente.setCompras(0);
                cliente.setValorTotal(0.0);
                cliente.setFechaRegistro(fechaActual);
                cliente.setUltimaCompra("Sin Datos");
                if (controlCliente.guardar(cliente)) {
                    JOptionPane.showMessageDialog(null, "Registro Guardado");
                } else {
                    JOptionPane.showMessageDialog(null, "Error al Guardar");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El cliente ya esta registrado en la Base de Datos.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Completa todos los campos");
        }
        loadData("");
    }
    
    private Integer getClientIDByCedula (String cedula) {
        String sql = "select " + SQL.CLIENTES_IDCLIENT + " from " + SQL.CLIENTES_TABLE + " where " + SQL.CLIENTES_CEDULA +" = '" + cedula + "'";
        Statement st;
        try {
            Connection cn = SQL.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                return rs.getInt(SQL.CLIENTES_IDCLIENT);
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al obtener el id de la categoria!");
        }
        return -1;
    }
    */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private club.j3studios.system.utils.Button button1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel labelFecha;
    private javax.swing.JLabel labelR;
    private javax.swing.JLabel labelRango;
    private javax.swing.JLabel labelU;
    private javax.swing.JLabel labelUsuario;
    private javax.swing.JLabel labelVersion;
    public javax.swing.JScrollPane scrollPane;
    public javax.swing.JTable table;
    private club.j3studios.system.utils.TextFieldSearchOption txtBuscador;
    // End of variables declaration//GEN-END:variables
}
