/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package club.j3studios.system.b_windows.subwins;

import club.j3studios.system.b_windows.MainMenu;
import club.j3studios.system.b_windows.dialogs.DeleteItemVentaDialog;
import club.j3studios.system.b_windows.dialogs.editClientDialog;
import club.j3studios.system.b_windows.dialogs.newClientDialog;
import club.j3studios.system.control.Ctrl_Cliente;
import club.j3studios.system.database.SQL;
import club.j3studios.system.model.Cliente;
import club.j3studios.system.utils.SearchOption;
import club.j3studios.system.utils.Tools;
import club.j3studios.system.utils.jtable.ButtonRenderer;
import club.j3studios.system.utils.jtable.GestionEncabezadoTabla;
import club.j3studios.system.utils.jtable.TableActionCellEditor;
import club.j3studios.system.utils.jtable.TableActionCellRenderer;
import club.j3studios.system.utils.jtable.TableActionEvent;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author josne
 */
public class Clientes extends javax.swing.JPanel {

    private MainMenu principal;
    
    /** 
     * Creates new form Form
     * @param principal
     */
    public Clientes(MainMenu principal) {
        this.principal = principal;        
        initComponents();
        
        Timer timer = new Timer();
        // Schedule a task to be executed every second
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
            	String fechaActual = "";
                Date date = new Date();
                fechaActual = new SimpleDateFormat("dd/MM/yyyy - HH:mm:ss").format(date);            	
                labelFecha.setText(fechaActual);
            }
        }, 0, 1000);
        labelVersion.setText("Version " + MainMenu.VERSION_PROGRAM);
        
        txtBuscador.addEventOptionSelected((SearchOption option, int index) -> {
            txtBuscador.setHint("Buscar por el " + option.getName() + "...");
        });
        txtBuscador.addOption(new SearchOption("CÃ©dula", new ImageIcon(getClass().getResource("/images/etiqueta.png"))));
	txtBuscador.addOption(new SearchOption("Nombre", new ImageIcon(getClass().getResource("/images/escaner.png")))); 
	txtBuscador.setSelectedIndex(0);
        
        inicializarTablaProducto();        
        labelUsuario.setText(principal.usuario.getNombre());
        labelRango.setText("Administrador");
        
        loadData("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        labelVersion = new javax.swing.JLabel();
        labelFecha = new javax.swing.JLabel();
        labelUsuario = new javax.swing.JLabel();
        labelU = new javax.swing.JLabel();
        labelRango = new javax.swing.JLabel();
        labelR = new javax.swing.JLabel();
        txtBuscador = new club.j3studios.system.utils.TextFieldSearchOption();
        button1 = new club.j3studios.system.utils.Button();
        background = new javax.swing.JLabel();

        setOpaque(false);

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel1KeyPressed(evt);
            }
        });
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollPane.setViewportView(table);

        jPanel1.add(scrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 1360, 580));

        jPanel3.setBackground(new java.awt.Color(255, 255, 220));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelVersion.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelVersion.setForeground(new java.awt.Color(102, 102, 102));
        labelVersion.setText("Version 1.13.08.23");
        jPanel3.add(labelVersion, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 362, 20));

        labelFecha.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        labelFecha.setForeground(new java.awt.Color(102, 102, 102));
        labelFecha.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelFecha.setText("13/08/2023 - 4:47:34");
        jPanel3.add(labelFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 0, 362, 20));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 740, 1360, 30));

        labelUsuario.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelUsuario.setForeground(new java.awt.Color(255, 255, 255));
        labelUsuario.setText("---");
        jPanel1.add(labelUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 40, 210, 20));

        labelU.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelU.setForeground(new java.awt.Color(255, 255, 255));
        labelU.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelU.setText("VENDEDOR: ");
        jPanel1.add(labelU, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, 90, 20));

        labelRango.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelRango.setForeground(new java.awt.Color(255, 255, 255));
        labelRango.setText("---");
        jPanel1.add(labelRango, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 60, 210, 20));

        labelR.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelR.setForeground(new java.awt.Color(255, 255, 255));
        labelR.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelR.setText("RANGO: ");
        jPanel1.add(labelR, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 90, 20));

        txtBuscador.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscadorKeyReleased(evt);
            }
        });
        jPanel1.add(txtBuscador, new org.netbeans.lib.awtextra.AbsoluteConstraints(934, 100, 420, 50));

        button1.setBackground(new java.awt.Color(102, 204, 255));
        button1.setForeground(new java.awt.Color(255, 255, 255));
        button1.setText("NUEVO CLIENTE");
        button1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        button1.setRippleColor(new java.awt.Color(0, 102, 255));
        button1.setShadowColor(new java.awt.Color(0, 102, 255));
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });
        jPanel1.add(button1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, 200, 50));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Background1.png"))); // NOI18N
        background.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                backgroundKeyPressed(evt);
            }
        });
        jPanel1.add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, -1, 760));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backgroundKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_backgroundKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F10) {
            new Tools().debug("Presionaste la tecla F10");
        }
    }//GEN-LAST:event_backgroundKeyPressed

    private void jPanel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F10) {
            new Tools().debug("Presionaste la tecla F10");
        }
    }//GEN-LAST:event_jPanel1KeyPressed

    private void txtBuscadorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscadorKeyReleased
        if (txtBuscador.isSelected()) {
            int option = txtBuscador.getSelectedIndex();
            String text = "%"+txtBuscador.getText().trim()+"%";
            if (option==0) {
            	loadData("where " + SQL.CLIENTES_CEDULA + " like ? ", text);
            } else {
            	loadData("where " + SQL.CLIENTES_NOMBRE + " like ? ", text);
            }
        }
    }//GEN-LAST:event_txtBuscadorKeyReleased

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        newClientDialog dialog = new newClientDialog(principal, this);
        dialog.showMessage();
        if (dialog.getMessageType() == newClientDialog.MessageType.OK) {
            saveClient(dialog);
        }
    }//GEN-LAST:event_button1ActionPerformed
    
    private void inicializarTablaProducto() {
        table = new JTable();
        table.setDefaultRenderer(Object.class, new ButtonRenderer());
        
        modeloDatosProductos = new DefaultTableModel() {
            private static final long serialVersionUID = 1L;
            
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, true
            };
            
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
                
        modeloDatosProductos.addColumn("CÃ©dula");
        modeloDatosProductos.addColumn("Nombre y Apellido");
        modeloDatosProductos.addColumn("GÃ©nero");
        modeloDatosProductos.addColumn("TelÃ©fono");
        modeloDatosProductos.addColumn("DirecciÃ³n");
        modeloDatosProductos.addColumn("Correo ElectrÃ³nico");
        modeloDatosProductos.addColumn("Compras");
        modeloDatosProductos.addColumn("Total Consumido");
        modeloDatosProductos.addColumn("Fecha de Registro");
        modeloDatosProductos.addColumn("Ultima Compra");        
        modeloDatosProductos.addColumn(" ");
		
        table.setRowHeight(40);
        
        JTableHeader jtableHeader = table.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezadoTabla());
        table.setTableHeader(jtableHeader);
	    
        table.setModel(modeloDatosProductos);
        TableActionEvent event = new TableActionEvent() {
            @Override
            public void onEdit(int row) {                
                String cedula = table.getValueAt(row, 0).toString();
                clickEditor(cedula);
            }
            @Override
            public void onDelete(int row) {
                String cedula = table.getValueAt(row, 0).toString();
                clickDelete(cedula);
            }
        };
        table.getColumnModel().getColumn(10).setCellRenderer(new TableActionCellRenderer());
        table.getColumnModel().getColumn(10).setCellEditor(new TableActionCellEditor(event));
        for (int i = 0; i<table.getColumnCount()-1; i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(new DefaultTableCellRenderer() {
            private static final long serialVersionUID = 1L;
                @Override
                public Component getTableCellRendererComponent(JTable jtable, Object o, boolean bln, boolean bln1, int i, int i1) {
                    setHorizontalAlignment(SwingConstants.CENTER);
                    return super.getTableCellRendererComponent(jtable, o, bln, bln1, i, i1);
                }
            });
        }
        
        scrollPane.setViewportView(table);
    }
    
    private Integer clientID = -1;
    private Integer compras = 0;
    private Double totalConsume = 0.00;
    private String regDate = "";
    private String lastCompra = "";
        
        
    private void clickEditor(String ceduula) {
        String cedula = "";
        String nombre = "";
        String genero = "";
        String telefono = "";
        String direccion = "";
        String correo = "";
        //
        Integer clientID = -1;
        Integer compras = 0;
        Double totalConsume = 0.0;
        String regDate = "";
        String lastCompra = "";
                
        try {
            Connection con = SQL.conectar();
            String sql = "select * from " + SQL.CLIENTES_TABLE + " where " + SQL.CLIENTES_CEDULA + " = '" + ceduula + "'";
            
            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();            
            while (rs.next()) {
                cedula = rs.getString(SQL.CLIENTES_CEDULA);
                nombre = rs.getString(SQL.CLIENTES_NOMBRE);
                genero = rs.getString(SQL.CLIENTES_GENERO);
                telefono = rs.getString(SQL.CLIENTES_TLF);
                direccion = rs.getString(SQL.CLIENTES_DIRECCION);
                correo = rs.getString(SQL.CLIENTES_CORREO);
                
                clientID = rs.getInt(SQL.CLIENTES_IDCLIENT);
                compras = rs.getInt(SQL.CLIENTES_COMPRAS);
                totalConsume = rs.getDouble(SQL.CLIENTES_TOTALCONSUME);
                regDate = rs.getString(SQL.CLIENTES_FECHAREG);
                lastCompra = rs.getString(SQL.CLIENTES_LASTCOMPRA);
            }
            con.close();
        } catch (SQLException e) {
            System.out.print("Error al llenar la tabla de productos.");
            System.out.print(e);
        }
        
        this.clientID = clientID;
        this.compras = compras;
        this.totalConsume = totalConsume;
        this.regDate = regDate;
        this.lastCompra = lastCompra;
        
        editClientDialog dialog = new editClientDialog(principal, this);
        dialog.showMessage(cedula, nombre, genero, telefono, direccion, correo);
        if (dialog.getMessageType() == editClientDialog.MessageType.OK) {
            updateClientData(dialog);
        }
    }
    
    private void clickDelete (String cedula) {
        Integer clientID = -1;
                
        try {
            Connection con = SQL.conectar();
            String sql = "select * from " + SQL.CLIENTES_TABLE + " where " + SQL.CLIENTES_CEDULA + " = '" + cedula + "'";
            
            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();            
            while (rs.next()) {
                clientID = rs.getInt(SQL.CLIENTES_IDCLIENT);
            }
            con.close();
        } catch (SQLException e) {
            System.out.print("Error al llenar la tabla de productos.");
            System.out.print(e);
        }
        
        this.clientID = clientID;
        Ctrl_Cliente controlCliente = new Ctrl_Cliente();
        
        DeleteItemVentaDialog dialog = new DeleteItemVentaDialog(principal);
        dialog.showMessage("Â¿Eliminar Cliente?", "Â¿Seguro deseas eliminar este cliente?");
        if (dialog.getMessageType() == DeleteItemVentaDialog.MessageType.OK) {
            if (!controlCliente.eliminar(this.clientID)) {
                JOptionPane.showMessageDialog(null, "Â¡Cliente Eliminado!");
                clearInfo();
            } else {
                JOptionPane.showMessageDialog(null, "Â¡Error al eliminar cliente!");
                clearInfo();
            }
        }
        
        loadData("");
    }
    
    private void clearInfo() {
        this.clientID = -1;
        this.compras = 0;
        this.totalConsume = 0.0;
        this.regDate = "";
        this.lastCompra = "";
    }
    
    private void loadData (String where, Object... search) {
        try {
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.setRowCount(0);
			
            Connection con = SQL.conectar();
            String sql = "select * from " + SQL.CLIENTES_TABLE + " " + where;
            
            PreparedStatement ps = con.prepareStatement(sql);
            for (int i = 0; i < search.length; i++) {
                ps.setObject(i+1, search[i]);
            }
            ResultSet rs = ps.executeQuery();
            
            while (rs.next()) {
                String cedula = rs.getString(SQL.CLIENTES_CEDULA);
                String nombre = rs.getString(SQL.CLIENTES_NOMBRE);
                String genero = rs.getString(SQL.CLIENTES_GENERO);
                String telefono = rs.getString(SQL.CLIENTES_TLF);
                String direccion = rs.getString(SQL.CLIENTES_DIRECCION);
                String correo = rs.getString(SQL.CLIENTES_CORREO);
                Integer compras = rs.getInt(SQL.CLIENTES_COMPRAS);
                Double totalConsume = rs.getDouble(SQL.CLIENTES_TOTALCONSUME);
                String regDate = rs.getString(SQL.CLIENTES_FECHAREG);
                String lastDate = rs.getString(SQL.CLIENTES_LASTCOMPRA);
                
                DecimalFormat formato = new DecimalFormat("###,###,##0.00");
                String totalConsumeFormat = "Bs. " + formato.format(totalConsume);
                
                model.addRow(new Object[] {
                    cedula, 
                    nombre, 
                    genero,
                    telefono,
                    direccion, 
                    correo,
                    compras,
                    totalConsumeFormat,
                    regDate,
                    lastDate});
			                
                table.getColumnModel().getColumn(0).setPreferredWidth(60);
                table.getColumnModel().getColumn(1).setPreferredWidth(80);
                table.getColumnModel().getColumn(2).setPreferredWidth(80);
                table.getColumnModel().getColumn(3).setPreferredWidth(70);
                table.getColumnModel().getColumn(4).setPreferredWidth(220);
                table.getColumnModel().getColumn(5).setPreferredWidth(120);
                table.getColumnModel().getColumn(6).setPreferredWidth(60);
                table.getColumnModel().getColumn(7).setPreferredWidth(100);
                table.getColumnModel().getColumn(8).setPreferredWidth(120);
                table.getColumnModel().getColumn(9).setPreferredWidth(90);
                table.getColumnModel().getColumn(10).setPreferredWidth(40);
            }
	        
            con.close();
        } catch (SQLException e) {
            System.out.print("Error al llenar la tabla de productos.");
            System.out.print(e);
        }
    }
        
    private DefaultTableModel modeloDatosProductos;

    private void updateClientData(editClientDialog dialog) {
        Cliente cliente = new Cliente();
        Ctrl_Cliente controlCliente = new Ctrl_Cliente();
        
        if (!dialog.txtCedula.getText().isEmpty() && !dialog.txtNombre.getText().isEmpty() && !dialog.txtTlf.getText().isEmpty()) {
            
            cliente.setCedula(dialog.txtCedula.getText().trim());
            cliente.setNombre(dialog.txtNombre.getText().trim());
            cliente.setGenero(dialog.boxGenero.getSelectedItem().toString());
            cliente.setTelefono(dialog.txtTlf.getText().trim());
            cliente.setDireccion(dialog.txtDirection.getText().trim());
            cliente.setCorreo(dialog.txtCorreo.getText().trim());
            cliente.setCompras(this.compras);
            cliente.setValorTotal(this.totalConsume);
            cliente.setFechaRegistro(this.regDate);
            cliente.setUltimaCompra(this.lastCompra);
            
            if (controlCliente.actualizar(cliente, this.clientID)) {
                JOptionPane.showMessageDialog(null, "Â¡Datos del cliente actualizados!");
                clearInfo();
            } else {
                JOptionPane.showMessageDialog(null, "Â¡Error al actualizar los datos del cliente!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Completa todos los campos");
        }
        loadData("");
    }
    
    private void saveClient(newClientDialog dialog) {
        
        Cliente cliente = new Cliente();
        Ctrl_Cliente controlCliente = new Ctrl_Cliente();
        
        Date date = new Date();
        String fechaActual = new SimpleDateFormat("dd/MM/yyyy - HH:mm:ss").format(date);
                
        if (!dialog.txtCedula.getText().isEmpty() && !dialog.txtNombre.getText().isEmpty() && 
                !dialog.txtTlf.getText().isEmpty()) {
            
            if (!controlCliente.existeCliente(dialog.txtCedula.getText().trim())) {
                cliente.setCedula(dialog.txtCedula.getText().trim());
                cliente.setNombre(dialog.txtNombre.getText().trim());
                cliente.setGenero(dialog.boxGenero.getSelectedItem().toString());
                cliente.setTelefono(dialog.txtTlf.getText().trim());
                cliente.setDireccion(dialog.txtDirection.getText().trim());
                cliente.setCorreo(dialog.txtCorreo.getText().trim());
                cliente.setCompras(0);
                cliente.setValorTotal(0.0);
                cliente.setFechaRegistro(fechaActual);
                cliente.setUltimaCompra("Sin Datos");
                if (controlCliente.guardar(cliente)) {
                    JOptionPane.showMessageDialog(null, "Registro Guardado");
                } else {
                    JOptionPane.showMessageDialog(null, "Error al Guardar");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El cliente ya esta registrado en la Base de Datos.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Completa todos los campos");
        }
        loadData("");
    }
    
    private Integer getClientIDByCedula (String cedula) {
        String sql = "select " + SQL.CLIENTES_IDCLIENT + " from " + SQL.CLIENTES_TABLE + " where " + SQL.CLIENTES_CEDULA +" = '" + cedula + "'";
        Statement st;
        try {
            Connection cn = SQL.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                return rs.getInt(SQL.CLIENTES_IDCLIENT);
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al obtener el id de la categoria!");
        }
        return -1;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private club.j3studios.system.utils.Button button1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel labelFecha;
    private javax.swing.JLabel labelR;
    private javax.swing.JLabel labelRango;
    private javax.swing.JLabel labelU;
    private javax.swing.JLabel labelUsuario;
    private javax.swing.JLabel labelVersion;
    public javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    private club.j3studios.system.utils.TextFieldSearchOption txtBuscador;
    // End of variables declaration//GEN-END:variables
}
